<h> 

<p> 

<p>The set*() methods make specified changes immediately, whereas the change*() changes may be delayed. For example, invoking setScale(2.0f) changes the scale to 2.0 immediately, whereas invoking changeScale(2.0f) may take a few second while showing transition animation. The transition animation is pluggable. The caller invokes either event based on the situation.

<p>This framework is effective for simplifying the implementation of a component's natural motion shown in LG3D demos.

<p>Model Loader

<p>Support for model loaders is considered a key feature of LG3D technology, as it brings visual designers into the development loop. The ModelLoader class provides a simple yet powerful mechanism to load a 3D model from a file, and it supports many formats using the Java 3D loader mechanism.

<p>The ModelLoader class extends Component3D, and the constructor takes a model file name, a Java 3D model loader class object, and a matrix for static transformation of the model.

<p>Event Adapter and Animation Classes

<p>These components are located under the org.jdesktop.lg3d.utils package and form a major part of the LG3D utility classes.

<p>Figure 5: Mouse Event Propagation.

<p> 

<p>Event Adapter

<p>Classes under the eventadapter subpackage implement the LgEventListener interface and keep at least one reference to an object that implements the Action interface. An Event Adapter object is a receiver of events. It predigests the information provided through events and invokes the performAction method of an associated Action or Action Adapter object.

<p>Action Adapter

<p>Classes under the actionadapter subpackage implement the Action interface and keep at least one reference to an object that implements the Action interface. An Action Adapter object typically converts one kind of input into another by performing some processing against values propagated by performAction invocation. A action adapter class typically acts as a converter among different action types.

<p>Action

<p>Classes under the action subpackage implement the Action interface. These receive predigested information from an Event Adapter or Action Adapter object through a performAction method invocation and perform visual feedback. An Action object typically keeps a reference to an Action Behavior object in order to perform visual feedback based on animation.

<p>Action Behavior

<p>Classes under the behavior subpackage extend the ActionBehavior abstract class and implement basic animation. An Action Behavior object typically keeps a reference to a Component3D object and a TransitionSmoother, and performs animation using them.

<p>Transition Smoother

<p>Classes under the smoother subpackage provide reusable natural motion for action implementation. These classes implement the TransitionSmoother interface and generate reusable natural motion used in ActionBehavior implementation.

<p>The following code fragment uses event adapter and animation components. It rotates the targetComp object by 180 degrees back and forth in 1,000 milliseconds every time the sourceComp object is clicked:

<p>new MouseClickedEventAdapter(sourceComp   new ToggleAdapter(     new RotateAction(targetComp, (float)Math.PI, 1000)));

<p> 

<p>MouseClickedEventAdapter is an Event Adapter class, which extends the LgEventLister interface and registers itself to listen to MouseEvent. In the example, the event source to listen to is specified through the argument, which is the sourceComp Component3D object. Whenever it receives a MouseEvent from the object, it invokes the performAction method of an associated Action or Action Adapter object. In the example, a ToggleAdapter object is specified as an argument in the constructor.

<p>ToggleAdapter is an Action Adapter. It keeps an internal boolean state that gets toggled whenever the performAction method is invoked. It then invokes the performAction method of an associated object with the boolean state information. In the example, a RotateAction object is specified as an argument in the constructor. RotateAction is an Action class. The performAction method rotates the targetComp object based on the boolean argument. If it is true, it rotates the object by the given angle duration. In this case, the angle is ? (pi) in radians, which is 180 degrees, within the given duration, which is 1000 milliseconds. If the argument were false, it rotate the object back to the default position, which is 0 degree. By combining this method with the ToggleAdapter object, the flipping back-and-force motion is achieved.

<p>The RotateAction object internally creates an instance of the RotationChanger class and actually performs the rotation animation. It also creates an instance of the NaturalFloatSmoother class passing the duration parameter, 1000 milliseconds. This Transition Smoother object is then given the RotationChanger object through the constructor argument for its use to perform a natural flipping motion.

<p>The RotationChanger class is one of the predefined behaviors that execute on the server side. The NaturalFloatSmoother class implements the TransitionSmoother interface, which is the key class that implements all of the natural motion you see in the LG3D demo. The implementation algorithm and parameters are defined based on a heuristic approach. The algorithm is a bit expensive Ã¢â‚¬â€œ because of its frame-rate conversion.  Optimizations can be performed once an area is identified as a hot spot.

<p>The Scene Manager

<p>The Scene Manager takes over the role of window manager for a 3D scene, since typical LG3D-aware 3D application user interfaces have unique shapes not limited to a window shape. The Scene Manager interacts with the user and applications. It implements management policy for applications running in the environment and is responsible for arranging those in the 3D space.

<p>Figure 6: A Visual Set Up.

<p> 

<p>Scene Manager design is a major area of future exploration. In order to stimulate many ideas, an initial framework for componentized Scene Manager technology has been provided. In the implementation, attention has been paid to two-and-a-half dimension as well as full three dimension experiences under the same abstraction. The following list shows the key Scene Manager components, along with its abstract class or interface name.

<p>Application Container (AppContainer abstract class)

<p>Taskbar (Taskbar abstract class)

<p>Global Light (GlobalLights abstract class)

<p>Cursor Module (CursorModule interface)

<p>These components are located under the ?lg3d.scenemanager.utils package.

<p>The following diagram shows the relationships among those Scene Manager components and other related LG3D classes. Note that Application Container is usually invisible.

<p>Figure 7: Scene Manager Classes.

<p> 

<p>SceneManagerBase

<p>SceneManagerBase is an implementation of SceneManager that integrates other Scene Manager components. It communicates with DisplayServerControl through the DisplayServerManagerInterface. DisplayServerControl is the main body of the LG3D Display Server module that is responsible for all the rendering that happens in the 3D space. The communication includes obtaining display-specific information like the field of view, setting view transform, and specifying the CursorModule. DisplayServerControl in turn communicates with SceneManagerBase through the SceneManager interface. The communication includes adding and removing a Frame3D object.

<p>When setActive method of Frame3D is invoked with an argument set to true, DisplayServerControl eventually receives server-side representation of the Frame3D object. The DisplayServerControl then in turn passes the object to the SceneManagerBase object. Note that the native window abstraction layer also provides a Frame3D object as the top level object with which Scene Manager interacts. In this way, there is no difference between an LG3D-aware 3D application and a 3D-mapped native window.

<p>Application Container

<p>The Application Container is a key foundation for implementing the user interaction and application navigation capabilities of Scene Manager. It is also useful for achieving two-and-a-half dimension desktop experience. The application container is a subclass of Container3D and is specialized for hosting applications, such as Frame3D objects.

<p>An application container usually leverages the 3D layout manager to implement easy-to-access application arrangements in the container. It is key to leveraging the 3D space when arranging the applications. Based on a Scene Manager implementation exercise, the 3D layout manager turned out to be a flexible platform for achieving the goal while allowing implementations to be componentized.

<p>A single Scene Manager can host multiple application containers. The Scene Manager implements the concept of the current application container. It receives a Frame3D object when a new LG3D-aware application is activated. The current container can be switched dynamically. This feature is typically used to implement virtual desktop switching.

<p>The Background

<p>In the LG3D 3D desktop environment, the background is more than just a static image behind application windows. It actually defines the 3D environment with which the user can interact and where application containers can be positioned.

<p>The Background can comprise any 3D geometry as it is a subclass of Container3D, to which any geometry can be added and any behavior can be integrated.

<p>In addition to setting up the geometry to render on the background, the Background object also hosts application containers. The object usually keeps a reference to a SceneManager object that is passed through the initialize method, and invokes the SceneManager object to manage application containers including obtaining and switching current. Since Application Container is just a subclass of Container3D, the background object can place it anywhere in the 3D scene. It also can allow the user to handle multiple application containers by switching the current application container and changing the view so that the current one remains accessible to the user.

<p>For more details, you may want to check out the SimpleImageBackground class, which is a simple example implementation of background with comments.

<p>Global Lights

<p>Light is also componentized. Instead of a static global light that the default implementation provides (StandardGlobalLights), you can develop lights that dynamically change angle and color based on time of the day, for example. Or, a Scene Manager may want to use lighting effects to provide an alert or focus to the user.

<p>Cursor Module

<p>A CursorModule class implements policies on how cursor is displayed. It provides Scene Manager hooks for the addition and removal of Cursor3D objects, and a hook for positioning the current cursor. For example, in the default implementation StandardCursorModule, the maximum distance of the current cursor from the user's point of view is limited to a certain value so that the cursor will appear to the user at a reasonable size. Without this policy, a cursor could be drawn so far away on the surface of the background that the user would have difficulty finding it.

<p>Interaction Events Between Frame3D and Scene Manager

<p>The generic event system is employed as the main communication method between Frame3D and Scene Manager, to achieve both loosely coupled componentization and the interplay of a rich set of user actions and requests between them.

<p>This area needs more investigation. Currently, a few adhoc events have been introduced to achieve the initial demo features.

<p>Existing 2D Application Integration

<p>The 2D application integration framework can be roughly divided into two major areas: the Foundation Window System (FWS) module and the Native Window representation module.

<p>Figure 8: 2D Integration Classes.

<p>Click to enlarge

<p> 

<p>The FWS module provides the integration with the underlying window system, including application visual capture and event delivery integration. Since these interfaces are not a part of the client API and not visible to client application developers, this document does not cover any details.

<p>The Native Window representation module sits on top of the FWS, and provides abstracted representation of native window application's visual aspect. It is in the org.jdesktop.lg3d.displayserver.nativewindow package. Its two primary design goals are to

<p>Allow a pluggable Look and Feel

<p>Encapsulate complexity around native window capture and communication

<p>The classes in this package attempt to abstract and hide all the complexity around the native application visual capture, as well as necessary communication with the application side. Figure 8 illustrates the relationships among the major classes. NativeWindow3D is the top level class with which SceneManager interacts. It extends Frame3D and behaves just like another LG3D-aware 3D application. It also implements the methods declared in NativeWindowMonitor, which are used for the native 2D window manager to give notifications about status changes, and so on. The implementation, in turn, uses NativeWindowControl interface to communicate back to the native window manager, so that it can perform actions on the 2D application associated with this object.

<p>NativeWindowLookAndFeel defines the native window's appearance and visual texture. At this level, typically, window decoration is constructed. The current implementation includes GlassyNativeWindowLookAndFeel in the lg3d.scenemanager.utils.decoration package as an example.

<p>NativeWindowObject and TiledNativeWindowImage exist to hide all the complexity related to native window capture support. Texture is used for presenting captured 2D window surfaces in the 3D space, but it has a size limitation that is sometimes smaller than maximum 2D window size. To deal with large 2D window capture, we use composite multiple textures created from a set of ImageComponent2Ds. The details are hidden under these classes.

<p>Window Decoration Customization

<p>By subclassing NativeWindowLookAndFeel, you can develop your own window decoration. If you want a native window representation this is not on a simple quad – on a wavy sheet, for example – you will need to implement a version of NativeWindowObject that supports the shape you want.

<p>An API to map multiple native window representations on surfaces of a single object is under development, which will be used to put another view on the back side of the window.

<p>A Quick Tour of the Project Looking Glass Source Code

<p>Now that you've learned the basic architecture of Project Looking Glass and understand its important classes, you are invited to download the code and to begin contributing your programming skills. To work on this project, you need to be a java.net member, which is free upon registration. Then you can download and install a working version of the software and the source code.

<p>The Project Looking Glass source code is located in the lg3d-core/src CVS repository. The following table is an overview of the various files in the the repository.

<p>Repository Files

<p>